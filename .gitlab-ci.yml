variables:
  CI_REGISTRY: "registry.gitlab.com"

deploy:
  stage: deploy
  script:
    - sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    
    # Логирование всех переменных
    - echo "USER_SERVICE_APP_TAG=${USER_SERVICE_APP_TAG:-latest}"
    - echo "AUTH_APP_TAG=${AUTH_APP_TAG:-latest}"
    - echo "ORDER_SERVICE_APP_TAG=${ORDER_SERVICE_APP_TAG:-latest}"
    - echo "LOCATION_APP_TAG=${LOCATION_APP_TAG:-latest}"
    - echo "CLOUD_APP_TAG=${CLOUD_APP_TAG:-latest}"
    - echo "DB_PASSWORD_CLOUD=$DB_PASSWORD_CLOUD"
    - echo "API_PORT_CLOUD=$API_PORT_CLOUD"
    - echo "DB_ADDRESS_CLOUD=$DB_ADDRESS_CLOUD"
    - echo "DB_NAME_CLOUD=$DB_NAME_CLOUD"
    - echo "API_ADDRESS_CLOUD=$API_ADDRESS_CLOUD"
    
    # Устанавливаем переменные
    - export USER_SERVICE_APP_TAG=${USER_SERVICE_APP_TAG:-latest}
    - export AUTH_APP_TAG=${AUTH_APP_TAG:-latest}
    - export ORDER_SERVICE_APP_TAG=${ORDER_SERVICE_APP_TAG:-latest}
    - export LOCATION_APP_TAG=${LOCATION_APP_TAG:-latest}
    - export CLOUD_APP_TAG=${CLOUD_APP_TAG:-latest}
    - export DB_PASSWORD_CLOUD=$DB_PASSWORD_CLOUD
    - export API_PORT_CLOUD=$API_PORT_CLOUD
    - export DB_ADDRESS_CLOUD=$DB_ADDRESS_CLOUD
    - export DB_NAME_CLOUD=$DB_NAME_CLOUD
    - export API_ADDRESS_CLOUD=$API_ADDRESS_CLOUD
    
    # Проверяем, что переменные правильно установлены
    - echo "USER_SERVICE_APP_TAG=${USER_SERVICE_APP_TAG}"
    - echo "AUTH_APP_TAG=${AUTH_APP_TAG}"
    - echo "ORDER_SERVICE_APP_TAG=${ORDER_SERVICE_APP_TAG}"
    - echo "LOCATION_APP_TAG=${LOCATION_APP_TAG}"
    - echo "CLOUD_APP_TAG=${CLOUD_APP_TAG}"
    - echo "DB_PASSWORD_CLOUD=$DB_PASSWORD_CLOUD"
    - echo "API_PORT_CLOUD=$API_PORT_CLOUD"
    - echo "DB_ADDRESS_CLOUD=$DB_ADDRESS_CLOUD"
    - echo "DB_NAME_CLOUD=$DB_NAME_CLOUD"
    - echo "API_ADDRESS_CLOUD=$API_ADDRESS_CLOUD"
    - |
      echo "Removing Docker stack 'homerep'..."
      if sudo docker stack ls | grep -q 'homerep'; then
        if sudo docker stack rm homerep; then
          echo "Stack 'homerep' removed successfully."
        else
          echo "ERROR: Failed to remove stack 'homerep' (check permissions or stack status)." >&2
        fi
      else
        echo "Stack 'homerep' not found. Skipping removal."
      fi
    
    - |
      echo "Checking Docker network 'homerep-network'..."
      if sudo docker network inspect homerep-network >/dev/null 2>&1; then
        echo "Network 'homerep-network' already exists. Skipping creation."
      else
        echo "Creating Docker network 'homerep-network'..."
        if sudo docker network create --driver overlay homerep-network; then
          echo "Network 'homerep-network' created successfully."
        else
          echo "ERROR: Failed to create network 'homerep-network' (check permissions or Docker daemon status)." >&2
          exit 1
        fi
      fi

    - |
      echo "Trying to delete old homerep images..."
      if sudo docker images --filter "reference=*homerep*" -q > /dev/null 2>&1; then
        IMAGES=$(sudo docker images --filter "reference=*homerep*" -q)
        if [ -n "$IMAGES" ]; then
          echo "Found images to delete:"
          echo "$IMAGES"
          sudo docker rmi $IMAGES || echo "Some images could not be removed (maybe in use or permission denied)."
        else
          echo "No images matching '*homerep*' found."
        fi
      else
        echo "WARNING: Docker daemon is not accessible. Skipping image cleanup."
      fi

    - sleep 10

    # Генерация docker-compose файла
    - envsubst < docker-compose.prod.yml > docker-compose.gen.yml
    
    # Деплой в Docker Swarm
    - sudo docker stack deploy -c docker-compose.gen.yml homerep
  tags:
    - cloudru
